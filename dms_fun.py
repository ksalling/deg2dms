# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Deg2dms
                                 A QGIS plugin
 This plugin converts deg to DMS in table
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-04
        copyright            : (C) 2021 by Ivan Lebedev
        email                : lebedev77@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Ivan Lebedev'
__date__ = '2021-10-04'
__copyright__ = '(C) 2021 by Ivan Lebedev'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


def dms2deg(dms):
    num_list = []
    num = ''
    for char in dms:
        if char.isdigit() or char == '.' or char == ',':
            num = num + char
        else:
            if num != '':
                num_list.append(str(num))
                num = ''
    if num != '':
        num_list.append(str(num))
     
    print(num_list)
    
   
    degs = num_list[0]
    minuts = num_list[1]
    seconds = num_list[2]
    deg = float(degs) + float(minuts) / 60 + float(seconds) / 3600
    return deg

def deg2dms(deg):
    d = int(deg)
    m = float(((deg - d) * 60 - d) * 60)
    # s = float(((deg - d) * 60 - m) * 60)
    return "{}Â°{}'".format(d, round(m, 2))

